#include <iostream>
#include <bits/stdc++.h>
using namespace std;

enum Color { RED, BLACK};
struct node 
{
    int curVal;
    bool color;
    struct node* left, *right, *parent;
    
    node(int val)
    {
        curVal = val;
        color = RED;
        left = right = parent = nullptr;
    }
};

struct node* rotateRight(struct node* root, struct node* gParent)
{
    struct node* gp_left = gParent->left;
    
    gParent->left = gp_left->right;
    
    if(gParent->left != nullptr)
        gParent->left->parent = gParent;
    
    gp_left->parent = gParent->parent;
    
    if(gParent->parent == nullptr)
        root = gp_left;
    else if(gParent == gParent->parent->left)
        gParent->parent->left = gp_left;
    else
        gParent->parent->right = gp_left;
        
    gp_left->right = gParent;
    gParent->parent = gp_left;

    return root;
}

struct node* rotateLeft(struct node* root, struct node* gParent)
{
    struct node* gp_right = gParent->right;
    
    gParent->right = gp_right->left;
    
    if(gParent->right != nullptr)
        gParent->right->parent = gParent;
    
    gp_right->parent = gParent->parent;
    
    if(gParent->parent == nullptr)
        root =gp_right;
    else if(gParent == gParent->parent->right)
        gParent->parent->right = gp_right;
    else
        gParent->parent->left = gp_right;
        
    gp_right->left = gParent;
    gParent->parent = gp_right;
    
    return root;
}

void fixViolation(struct node* root, struct node* newNode)
{
    struct node *newNodeParent = nullptr, *newNodeGrandParent = nullptr;

    while((newNode != root) && (newNode->color == RED) && (newNode->parent->color == RED))
    {
        cout << "fixViolation :" << endl;
        newNodeParent = newNode->parent;
        newNodeGrandParent = newNode->parent->parent;
        
        if(newNodeParent == newNodeGrandParent->left)
        {
            struct node* uncle = newNodeGrandParent->right;
            
            if((uncle != nullptr) && (uncle->color == RED))
            {
                newNodeGrandParent->color = RED;
                newNodeParent->color = uncle->color = BLACK;
                newNode = newNodeGrandParent;
            }
            else
            {
                if(newNode == newNodeParent->right)
                {
                    cout << "rotateLeft :" << endl;
                    rotateLeft(root, newNodeParent);
                    newNode = newNodeParent;
                    newNodeParent = newNode->parent;
                }
                cout << "rotateRight :" << endl;
                rotateRight(root, newNodeGrandParent);
                swap(newNodeParent->color, newNodeGrandParent->color);
                newNode = newNodeParent;
            }
        }
        else
        {
            struct node* uncle = newNodeGrandParent->left;
            if((uncle != nullptr) && (uncle->color == RED))
            {
                newNodeGrandParent->color = RED;
                newNodeParent->color = uncle->color = BLACK;
                newNode = newNodeGrandParent;
            }
            else
            {
                if(newNode == newNodeParent->left)
                {
                    rotateRight(root, newNodeParent);
                    newNode = newNodeParent;
                    newNodeParent = newNode->parent;
                }
                rotateLeft(root, newNodeGrandParent);
                swap(newNodeParent->color, newNodeGrandParent->color);
                newNode = newNodeParent;
            }
        }
    }
    root->color = BLACK;
}

struct node* BSTinsert(struct node* curNode, struct node* newNode)
{
    if(curNode == nullptr)
        return newNode;
        
    if(curNode->curVal < newNode->curVal)
    {
        curNode->left = BSTinsert(curNode->left, newNode);
        curNode->left->parent = curNode;
    }
    
    if(curNode->curVal > newNode->curVal)
    {
        curNode->right = BSTinsert(curNode->right, newNode);
        curNode->right->parent = curNode;
    }
    
    
    return curNode;
}


struct node* insert(struct node* curNode, int key)
{
    struct node* newNode = new struct node(key);
    curNode = BSTinsert(curNode, newNode);
    fixViolation(curNode, newNode);

    return curNode;
}

struct node* search(struct node* root, int val)
{
    struct node* temp = root;
    
    while(temp != nullptr)
    {
        if(val > temp->left)
        {
            if(temp->left == nullptr)
                break;
            else
                temp = temp->left;
        }
        else
        {
            if(val == temp->val)
            {
                break;
            }
            else
            {
                if(temp->right == nullptr)
                    break;
                else
                    temp = temp->right;
            }
        }
    }
    return temp;
}

struct node* sucessor(struct node* curRight)
{
    while(curRight->left != nullptr)
        curRight = curRight->left;
    return curRight;
}

struct node* FindNextU(struct node* curV)
{
    if(curV->left == nullptr && curV->right == nullptr)
    {
        return nullptr;
    }
    else if(curV->left == nullptr)
    {
        return curV->left;
    } else if(curV->right == nullptr)
    {
        return curV->right;
    } else if(curV->left != nullptr && curV->right != nullptr)
    {
        return sucessor(curV->right);
    }
}

bool isOnbLeft(struct node* root)
{
    return root->parent->left;
}
struct node* sibling(struct node* x)
{
    if(x->parent == nullptr)
        return nullptr;
    if(isOnbLeft(x))
        return x->parent->right;
    else
        return x->parent->left;
}

bool hasRedChild(struct node* root)
{
    if(((root != nullptr) && (root->left != nullptr) && (root->left->color == RED)) ||
        ((root != nullptr) && (root->right != nullptr) && (root->right->color == RED)))
        return true;
}
void fixDoubleBlack(struct node* x)
{
    if(x == root)
        return;
    
    struct node* sibling = x->sibling(x), *parent = x->parent;

    if(sibling == nullptr)
        fixDoubleBlack(parent);
    else
    {
        if(sibling->color == RED)
        {
            parent->color = RED;
            sibling->color = BLACK;
            if(isOnbLeft(sibling))
                rotateRight(parent);
            else
                rotateLeft(parent);
            
            fixDoubleBlack(x);
        }
        else
        {
            //sibling is black
            if(hasRedChild(sibling))
            {
                if(sibling->left != nullptr and sibling->left->color == RED)
                {
                    if(isOnbLeft(sibling))
                    {
                        sibling->left = sibling->color;
                        sibling->color = sibling->parent->color;
                        rotateRight(parent);
                    }
                    else
                    {
                        sibling->left->color = parent->color;
                        rotateRight(sibling);
                        rotateLeft(parent);
                    }
                }
                else
                {
                    
                }
            }
        }
        }
    }
}
void deleteNode(struct node* root, int val)
{
    
    //find its u for current v node
    struct node* u = FindNextU(root)

    bool uvBlack = ((u == nullptr) or (u->color == BLACK)) && (v->color == BLACK));
    struct node* parent = v->parent;
    if(u == nullptr)
    {
        if(v == root)
            root = nullptr;
        else if(uvBlack)
        {
            fixDoubleBlack(v);
        }
        else if(v->sibling() != nullptr)
        {
            v->sibling()->color = RED;
        }
        
        if(v->isOnbLeft())
        {
            parent->left = nullptr;
        }
        else
        {
            parent->right = nullptr;
        }
        delete v;
        return;
    }
    else
    {
        if(v->left == nullptr || v->right == nullptr)
        {
            if(v == root)
            {
                v->curVal = u->curVal;
                v->left = v->right = nullptr;
                delete u;
            }
            if(v->isOnbLeft())
            {
                parent->left = u;
            }
            else
            {
                parent->right = v;
            }
            delete v;
            u->parent = parent;
            if(uvBlack)
            {
                fixDoubleBlack(u);
            }
            else
                u->color = BLACK;
            
            return;
        }
    }
    //v has 2 children. swap value with sucessor and recurse
    swapValue(u,v);
    deleteNode(u);
}


void deletebyVal(struct node* root, int val)
{
    struct node* v = search(val), *u;
    
    if(v->curVal != val)
    {
        cout << "searched element is not found" << endl;
        return;
    }
    deleteNode(root, v);
    
}

struct node* inorderTraversal(struct node* root)
{
    if(root == nullptr)
        return nullptr;
    inorderTraversal(root->left);
    cout << root->curVal;
    inorderTraversal(root->right);
}

int main() {
	struct node* root = new struct node(50);
	cout << "insert 40 :" << endl;
	root = insert(root, 40);
	cout << "insert 30 :" << endl;
	root = insert(root, 30);
	
	inorderTraversal(root);

    deleteNode(root, 40);	
	return 0;
}
