#include <iostream>
using namespace std;

struct node
{
    int data;
    struct node* left, *right;
    
    node(int val)
    {
        data = val;
        left = right = nullptr;
    }
};

struct node* constructTreeUtil(struct node* , int* indexPtr)
{
    int index = *indexPtr;
    
    if(*indexPtr >= n)
        return nullptr;
        
    struct node* temp = new struct node(arrTreeNode[*indexPtr]);
    (*indexPtr)++;
    if(nodeLoc[index] == 'N')
    {
        temp->left = constructTreeUtil(indexPtr);
        temp->right = constructTreeUtil(indexPtr);
    }
    return ;
}
struct node* constructTree(int arrTreeNode[], char nodeLoc[], int n)
{
    
}
int main() {
    int arrTreeNode = { 10, 30, 20, , 15 };
    char nodeLoc = {'N', 'N', 'L', 'L', 'L'};
    int n = sizeof(arrTreeNode) / sizeof(arrTreeNode[0]);
	struct node* = constructTree(arrTreeNode, nodeLoc, n);
	return 0;
}
